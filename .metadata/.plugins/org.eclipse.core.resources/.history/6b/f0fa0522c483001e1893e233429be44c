package com.topdata.controller;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.reflect.FieldUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Objects;

import com.topdata.model.Profile;
import com.topdata.model.Usuario;
import com.topdata.service.ProfileService;
import com.topdata.service.UsuarioService;




@RestController
@RequestMapping("/api/usuarios")
public class UsuarioController {

	@Autowired
	private final UsuarioService usuarioService;
	
	@Autowired
    private ObjectMapper objectMapper;
	
	boolean algumItemNulo = false;
	
    public UsuarioController(UsuarioService userService) {
        this.usuarioService = userService;	
    }
	
    @PostMapping
    public ResponseEntity<String> cadastrarUsuario(@RequestBody Map<String, Object> usuarioData) {
    	 
    	
    	Usuario usuario = objectMapper.convertValue(usuarioData, Usuario.class);
    	Profile profile = new Profile(); 
    	profile.setName(usuarioData.get("perfil").toString()); 
    	usuario.setProfile(profile);

    	try {
    		usuarioService.save(usuario);
    		return ResponseEntity.ok().build();
    	} catch (Exception e) {
    		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    	}

    }
    @GetMapping
    public List<Usuario> getAllUsuarios() {
        return usuarioService.getAllUsuarios();
    }
    @GetMapping(params ="/{id}")
    public Usuario getUsuarioById(@PathVariable Long id) {
    	System.out.println("Hello, world!");
        return usuarioService.getUsuarioById(id);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUsuario(@PathVariable Long id) {
        boolean deletado = usuarioService.d
        if (deletado) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
    
    public void deleteUsuarioById(Long id) {
        deleteUsuarioById(id);
    }
}