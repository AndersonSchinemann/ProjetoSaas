package com.topdata.teste;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import com.topdata.model.Usuario;
import com.topdata.repository.ProfileRepository;
import com.topdata.repository.UsuarioRepository;
import com.topdata.security.UserDetailsAdapter;
import com.topdata.service.UsuarioService;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.Mockito.*;

public class UsuarioServiceTest {

    @Mock
    private UsuarioRepository userRepository;

    @Mock
    private ProfileRepository profileRepository;

    @Mock
    private AuthenticationManager authenticationManager;

    @InjectMocks
    private UsuarioService usuarioService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindByUserEmail() {
        // Simular comportamento do repositório
        when(userRepository.findByEmail("test@example.com")).thenReturn(new Usuario());

        // Executar o método de serviço
        Usuario usuario = usuarioService.findByUserEmail("test@example.com");

        // Verificar se o resultado não é nulo
        assertNotNull(usuario);
    }

    @Test
    public void testSave() {
        // Criar um usuário para salvar
        Usuario usuario = new Usuario();
        usuario.setEmail("test@example.com");

        // Executar o método de serviço
        usuarioService.save(usuario);

        // Verificar se o método do repositório foi chamado
        verify(profileRepository, times(1)).save(usuario.getProfile());
        verify(userRepository, times(1)).save(usuario);
    }

    @Test
    public void testGetAllUsuarios() {
        // Simular comportamento do repositório
        when(userRepository.findAll()).thenReturn(new ArrayList<>());

        // Executar o método de serviço
        List<Usuario> usuarios = usuarioService.getAllUsuarios();

        // Verificar se a lista não é nula
        assertNotNull(usuarios);
    }

    // Adicione mais métodos de teste conforme necessário
}
